{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","prototype","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,cAAoB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAoB7C,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAQjB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,aA0B/BZ,EAAYe,WAAa,CACrBd,cAAee,IAAUC,KAAKC,Y,mCCjCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAQV,EAAU,EAAVA,IAEtC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECCf,SAAEA,GAAe,IAAD,EACdlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAyBxC,OAnBAC,qBAAW,WAEPxB,EAASC,GACRwB,MAAM,SAAAC,GAEHH,EAAU,CACNf,KAAOkB,EACPL,SAAS,SAOnB,CAACpB,IAKIqB,EDvB0BK,CAAc1B,GAAlCa,EAH0B,EAG/BN,KAAaa,EAHkB,EAGlBA,QAUrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEvB3BgB,EAAe,WAAM,MAEa7C,mBAAS,CAAC,aAFvB,mBAEhB8C,EAFgB,KAEJ/C,EAFI,KAavB,OACI,qCACI,iEACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ+C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YAYlC2B,EAAaE,UAAY,CACrBhD,cAAee,IAAUC,KAAKC,YAInB6B,Q,MCvCfG,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.049af45b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories }) => { // es buena Opción mandar el categories aquí  \"\", categories\"\n\n    const [inputValue, setInputValue] = useState(''); //'Hello wwPwwOwwLwwWwwE'\n\n    const handleInputChange = ( e ) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e)  => {\n        e.preventDefault();\n \n        if( inputValue.trim().length > 2){\n           setCategories( cats => [ inputValue, ...cats] ); \n           setInputValue('');\n        }\n        \n\n    }\n\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.protoTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=lrzQSU4jF22sTNtfmKao2swlw4np1h58`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => { // esto tambien se puede usar con desestructuración \r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs ;\r\n     \r\n    \r\n}\r\n\r\n//======================PETICION A LA API\r\n// const getGifs = async() => {\r\n//     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=lrzQSU4jF22sTNtfmKao2swlw4np1h58`;\r\n//     const resp = await fetch( url );\r\n//     const { data } = await resp.json();\r\n\r\n//     const gifs = data.map( img => { // esto tambien se puede usar con desestructuración \r\n//         return {\r\n//             id: img.id,\r\n//             title: img.title,\r\n//             url: img.images?.downsized_medium.url\r\n//         }\r\n//     })\r\n//     console.log(gifs);\r\n//     setImages( gifs );\r\n     \r\n    \r\n// }","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title , url} ) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'; \r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //     .then( setImages );\r\n    // }, [ category ]);\r\n\r\n    /// PETICION A LA API > getGifs.js\r\n\r\n                                                // { loading? 'Cargando....' : 'Data cargada' }\r\n    return (\r\n        <> \r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n            \r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                { \r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                        />\r\n                    )) \r\n                }\r\n                \r\n                \r\n\r\n            </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n        .then( imgs => {\r\n\r\n            setState( {\r\n                data:  imgs ,\r\n                loading: false,\r\n            } );\r\n            \r\n\r\n\r\n        } );\r\n\r\n    },[category])\r\n\r\n\r\n   \r\n\r\n    return state; //{data :[] ,loading: true }\r\n\r\n\r\n}\r\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\n\nimport PropTypes from 'prop-types';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    // const categories  = ['One Pucn', 'Gundam', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['Onepunch']);\n\n    \n    // const handleAdd = () => {\n        \n    //     // setCategories([...categories, 'HunterXHunter']); // RECORDAR QUE EL SPREAD CREA UN NUEVO APUNTADO D EMEMEORIA\n    //     // setCategories(['HunterXHunter',...categories ]);\n    //     setCategories( cats => [...cats, 'HunterXHunter']); // Tambien es posible utilizar un Callback().\n        \n    // }\n\n    return (\n        <>\n            <h2> GifExpertApp  wwPwwOwwLwwWwwE'</h2>\n            <AddCategory setCategories={ setCategories } /> \n            <hr />\n\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category } \n\n\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n} // Mandar la prop de categories en el componente tambien es buena opción  return <li key={ category }>{ category }</li>\n\nGifExpertApp.prototype = {\n    setCategories: PropTypes.func.isRequired,\n}\n\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n "],"sourceRoot":""}